// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_task_manager/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:bloc/bloc.dart' as _i17;
import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_task_manager/core/errors/failure.dart' as _i12;
import 'package:flutter_task_manager/core/useCases/UseCase.dart' as _i13;
import 'package:flutter_task_manager/feature/data/dataSources/TaskLocalDataSource.dart'
    as _i15;
import 'package:flutter_task_manager/feature/data/models/TaskModel.dart' as _i4;
import 'package:flutter_task_manager/feature/data/repositories/TaskRepositoryImpl.dart'
    as _i16;
import 'package:flutter_task_manager/feature/domain/entities/TaskEntity.dart'
    as _i9;
import 'package:flutter_task_manager/feature/domain/repositories/TaskRepository.dart'
    as _i3;
import 'package:flutter_task_manager/feature/domain/useCases/createNewTask.dart'
    as _i6;
import 'package:flutter_task_manager/feature/domain/useCases/getAllTasks.dart'
    as _i5;
import 'package:flutter_task_manager/feature/domain/useCases/removeTaskUseCase.dart'
    as _i8;
import 'package:flutter_task_manager/feature/domain/useCases/updateTask.dart'
    as _i7;
import 'package:flutter_task_manager/feature/presentation/bloc/task/task_bloc.dart'
    as _i10;
import 'package:flutter_task_manager/services/storage/storageServices.dart'
    as _i14;
import 'package:hive/hive.dart' as _i18;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i19;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskRepository_1 extends _i1.SmartFake
    implements _i3.TaskRepository {
  _FakeTaskRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskModel_2 extends _i1.SmartFake implements _i4.TaskModel {
  _FakeTaskModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAllTasksUseCase_3 extends _i1.SmartFake
    implements _i5.GetAllTasksUseCase {
  _FakeGetAllTasksUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreateNewTaskUseCase_4 extends _i1.SmartFake
    implements _i6.CreateNewTaskUseCase {
  _FakeCreateNewTaskUseCase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateTaskUseCase_5 extends _i1.SmartFake
    implements _i7.UpdateTaskUseCase {
  _FakeUpdateTaskUseCase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveTaskUseCase_6 extends _i1.SmartFake
    implements _i8.RemoveTaskUseCase {
  _FakeRemoveTaskUseCase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskEntity_7 extends _i1.SmartFake implements _i9.TaskEntity {
  _FakeTaskEntity_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskState_8 extends _i1.SmartFake implements _i10.TaskState {
  _FakeTaskState_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, List<_i9.TaskEntity>>> getAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, List<_i9.TaskEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i9.TaskEntity>>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i9.TaskEntity>>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>> createNewTask(
          {required _i9.TaskEntity? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewTask,
          [],
          {#data: data},
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>.value(
                _FakeEither_0<_i12.Failure, _i9.TaskEntity>(
          this,
          Invocation.method(
            #createNewTask,
            [],
            {#data: data},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>> updateTask(
          {required _i9.TaskEntity? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {#data: data},
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>.value(
                _FakeEither_0<_i12.Failure, _i9.TaskEntity>(
          this,
          Invocation.method(
            #updateTask,
            [],
            {#data: data},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, bool>> removeTask(
          {required _i9.TaskEntity? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTask,
          [],
          {#data: data},
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, bool>>.value(
            _FakeEither_0<_i12.Failure, bool>(
          this,
          Invocation.method(
            #removeTask,
            [],
            {#data: data},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, bool>>);
}

/// A class which mocks [GetAllTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTasksUseCase extends _i1.Mock
    implements _i5.GetAllTasksUseCase {
  MockGetAllTasksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.TaskRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, List<_i9.TaskEntity>>> call(
          _i13.NoParams? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [data],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, List<_i9.TaskEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i9.TaskEntity>>(
          this,
          Invocation.method(
            #call,
            [data],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i9.TaskEntity>>>);
}

/// A class which mocks [CreateNewTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateNewTaskUseCase extends _i1.Mock
    implements _i6.CreateNewTaskUseCase {
  MockCreateNewTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.TaskRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>> call(
          _i9.TaskEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>.value(
                _FakeEither_0<_i12.Failure, _i9.TaskEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>);
}

/// A class which mocks [UpdateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTaskUseCase extends _i1.Mock implements _i7.UpdateTaskUseCase {
  MockUpdateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.TaskRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>> call(
          _i9.TaskEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>.value(
                _FakeEither_0<_i12.Failure, _i9.TaskEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>);
}

/// A class which mocks [RemoveTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveTaskUseCase extends _i1.Mock implements _i8.RemoveTaskUseCase {
  MockRemoveTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.TaskRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, bool>> call(_i9.TaskEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, bool>>.value(
            _FakeEither_0<_i12.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, bool>>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i14.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<int?> addTask({required _i4.TaskModel? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [],
          {#data: data},
        ),
        returnValue: _i11.Future<int?>.value(),
      ) as _i11.Future<int?>);

  @override
  _i11.Future<List<_i4.TaskModel>> getTaskList() => (super.noSuchMethod(
        Invocation.method(
          #getTaskList,
          [],
        ),
        returnValue: _i11.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i11.Future<List<_i4.TaskModel>>);

  @override
  _i11.Future<void> updateTask({required _i4.TaskModel? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {#data: data},
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> removeTask({required _i4.TaskModel? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTask,
          [],
          {#data: data},
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [TaskLocalDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskLocalDataSourceImpl extends _i1.Mock
    implements _i15.TaskLocalDataSourceImpl {
  MockTaskLocalDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i4.TaskModel> createNewTask(_i4.TaskModel? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewTask,
          [data],
        ),
        returnValue: _i11.Future<_i4.TaskModel>.value(_FakeTaskModel_2(
          this,
          Invocation.method(
            #createNewTask,
            [data],
          ),
        )),
      ) as _i11.Future<_i4.TaskModel>);

  @override
  _i11.Future<List<_i4.TaskModel>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i11.Future<List<_i4.TaskModel>>.value(<_i4.TaskModel>[]),
      ) as _i11.Future<List<_i4.TaskModel>>);

  @override
  _i11.Future<void> updateTask(_i4.TaskModel? data) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [data],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<bool> removeTask(_i4.TaskModel? data) => (super.noSuchMethod(
        Invocation.method(
          #removeTask,
          [data],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);
}

/// A class which mocks [TaskRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepositoryImpl extends _i1.Mock
    implements _i16.TaskRepositoryImpl {
  MockTaskRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>> createNewTask(
          {required _i9.TaskEntity? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewTask,
          [],
          {#data: data},
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>.value(
                _FakeEither_0<_i12.Failure, _i9.TaskEntity>(
          this,
          Invocation.method(
            #createNewTask,
            [],
            {#data: data},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, List<_i9.TaskEntity>>> getAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, List<_i9.TaskEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i9.TaskEntity>>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i9.TaskEntity>>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>> updateTask(
          {required _i9.TaskEntity? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {#data: data},
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>.value(
                _FakeEither_0<_i12.Failure, _i9.TaskEntity>(
          this,
          Invocation.method(
            #updateTask,
            [],
            {#data: data},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i9.TaskEntity>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, bool>> removeTask(
          {required _i9.TaskEntity? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTask,
          [],
          {#data: data},
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, bool>>.value(
            _FakeEither_0<_i12.Failure, bool>(
          this,
          Invocation.method(
            #removeTask,
            [],
            {#data: data},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, bool>>);
}

/// A class which mocks [TaskBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskBloc extends _i1.Mock implements _i10.TaskBloc {
  MockTaskBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.GetAllTasksUseCase get getAllTaskUseCase => (super.noSuchMethod(
        Invocation.getter(#getAllTaskUseCase),
        returnValue: _FakeGetAllTasksUseCase_3(
          this,
          Invocation.getter(#getAllTaskUseCase),
        ),
      ) as _i5.GetAllTasksUseCase);

  @override
  _i6.CreateNewTaskUseCase get createNewTaskUseCase => (super.noSuchMethod(
        Invocation.getter(#createNewTaskUseCase),
        returnValue: _FakeCreateNewTaskUseCase_4(
          this,
          Invocation.getter(#createNewTaskUseCase),
        ),
      ) as _i6.CreateNewTaskUseCase);

  @override
  _i7.UpdateTaskUseCase get updateTaskUseCase => (super.noSuchMethod(
        Invocation.getter(#updateTaskUseCase),
        returnValue: _FakeUpdateTaskUseCase_5(
          this,
          Invocation.getter(#updateTaskUseCase),
        ),
      ) as _i7.UpdateTaskUseCase);

  @override
  _i8.RemoveTaskUseCase get removeTaskUseCase => (super.noSuchMethod(
        Invocation.getter(#removeTaskUseCase),
        returnValue: _FakeRemoveTaskUseCase_6(
          this,
          Invocation.getter(#removeTaskUseCase),
        ),
      ) as _i8.RemoveTaskUseCase);

  @override
  List<_i9.TaskEntity> get tasks => (super.noSuchMethod(
        Invocation.getter(#tasks),
        returnValue: <_i9.TaskEntity>[],
      ) as List<_i9.TaskEntity>);

  @override
  set tasks(List<_i9.TaskEntity>? _tasks) => super.noSuchMethod(
        Invocation.setter(
          #tasks,
          _tasks,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get updateTaskIndex => (super.noSuchMethod(
        Invocation.getter(#updateTaskIndex),
        returnValue: 0,
      ) as int);

  @override
  set updateTaskIndex(int? _updateTaskIndex) => super.noSuchMethod(
        Invocation.setter(
          #updateTaskIndex,
          _updateTaskIndex,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.TaskEntity get taskForUpdate => (super.noSuchMethod(
        Invocation.getter(#taskForUpdate),
        returnValue: _FakeTaskEntity_7(
          this,
          Invocation.getter(#taskForUpdate),
        ),
      ) as _i9.TaskEntity);

  @override
  _i10.TaskState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTaskState_8(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.TaskState);

  @override
  _i11.Stream<_i10.TaskState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i10.TaskState>.empty(),
      ) as _i11.Stream<_i10.TaskState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i10.TaskState getState() => (super.noSuchMethod(
        Invocation.method(
          #getState,
          [],
        ),
        returnValue: _FakeTaskState_8(
          this,
          Invocation.method(
            #getState,
            [],
          ),
        ),
      ) as _i10.TaskState);

  @override
  void add(_i10.TaskEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i10.TaskEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i10.TaskState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i10.TaskEvent>(
    _i17.EventHandler<E, _i10.TaskState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i10.TaskEvent, _i10.TaskState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void onChange(_i17.Change<_i10.TaskState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i18.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as E?);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));

  @override
  _i11.Stream<_i18.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i11.Stream<_i18.BoxEvent>.empty(),
      ) as _i11.Stream<_i18.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i11.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  _i11.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i11.Future<Iterable<int>>.value(<int>[]),
      ) as _i11.Future<Iterable<int>>);

  @override
  _i11.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}
